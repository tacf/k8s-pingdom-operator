/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tacf/k8s-pingdom-operator/pkg/apis/pingdomcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PingdomOperatorLister helps list PingdomOperators.
type PingdomOperatorLister interface {
	// List lists all PingdomOperators in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PingdomOperator, err error)
	// PingdomOperators returns an object that can list and get PingdomOperators.
	PingdomOperators(namespace string) PingdomOperatorNamespaceLister
	PingdomOperatorListerExpansion
}

// pingdomOperatorLister implements the PingdomOperatorLister interface.
type pingdomOperatorLister struct {
	indexer cache.Indexer
}

// NewPingdomOperatorLister returns a new PingdomOperatorLister.
func NewPingdomOperatorLister(indexer cache.Indexer) PingdomOperatorLister {
	return &pingdomOperatorLister{indexer: indexer}
}

// List lists all PingdomOperators in the indexer.
func (s *pingdomOperatorLister) List(selector labels.Selector) (ret []*v1alpha1.PingdomOperator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PingdomOperator))
	})
	return ret, err
}

// PingdomOperators returns an object that can list and get PingdomOperators.
func (s *pingdomOperatorLister) PingdomOperators(namespace string) PingdomOperatorNamespaceLister {
	return pingdomOperatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PingdomOperatorNamespaceLister helps list and get PingdomOperators.
type PingdomOperatorNamespaceLister interface {
	// List lists all PingdomOperators in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PingdomOperator, err error)
	// Get retrieves the PingdomOperator from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PingdomOperator, error)
	PingdomOperatorNamespaceListerExpansion
}

// pingdomOperatorNamespaceLister implements the PingdomOperatorNamespaceLister
// interface.
type pingdomOperatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PingdomOperators in the indexer for a given namespace.
func (s pingdomOperatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PingdomOperator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PingdomOperator))
	})
	return ret, err
}

// Get retrieves the PingdomOperator from the indexer for a given namespace and name.
func (s pingdomOperatorNamespaceLister) Get(name string) (*v1alpha1.PingdomOperator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pingdomoperator"), name)
	}
	return obj.(*v1alpha1.PingdomOperator), nil
}
